// <auto-generated />
using Domain.Contexts;
using Domain.Enums;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Domain.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Models.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.Property<Guid?>("ProviderId");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Domain.Models.Delivery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DeliveryDate")
                        .IsRequired();

                    b.Property<Guid?>("DriverId");

                    b.Property<DateTime?>("FinishDate");

                    b.Property<string>("Notes");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("Domain.Models.Driver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Notes");

                    b.Property<int>("Rate");

                    b.HasKey("Id");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("Domain.Models.Import", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("FinishDate");

                    b.Property<DateTime>("ImportDate");

                    b.Property<Guid?>("ProviderId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("Imports");
                });

            modelBuilder.Entity("Domain.Models.Manufacture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Country")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Manufactures");
                });

            modelBuilder.Entity("Domain.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CategoryForeignKey");

                    b.Property<int>("Count");

                    b.Property<Guid?>("ImportId");

                    b.Property<Guid?>("ManufactureId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("ProviderId");

                    b.Property<int>("ProviderPrice");

                    b.Property<int>("State");

                    b.Property<int>("StorePrice");

                    b.Property<string>("VendorCode")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CategoryForeignKey")
                        .IsUnique();

                    b.HasIndex("ImportId");

                    b.HasIndex("ManufactureId");

                    b.HasIndex("ProviderId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Domain.Models.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("Domain.Models.Provider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("Domain.Models.Purchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ContactId");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("DeliveryId");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("DeliveryId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("Domain.Models.PurchaseUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("DeliveryId");

                    b.Property<Guid?>("ProductId");

                    b.Property<Guid?>("PurchaseId");

                    b.Property<Guid?>("ReturnPurchaseId");

                    b.Property<int>("Status");

                    b.Property<int>("StorePrice");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnUpdate();

                    b.HasKey("Id");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("ReturnPurchaseId");

                    b.ToTable("PurchaseUnits");
                });

            modelBuilder.Entity("Domain.Models.ReturnPurchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<Guid?>("PurchaseId");

                    b.Property<int>("Reason");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseId");

                    b.ToTable("ReturnPurchases");
                });

            modelBuilder.Entity("Domain.Models.Contact", b =>
                {
                    b.HasOne("Domain.Models.Provider")
                        .WithMany("Contacts")
                        .HasForeignKey("ProviderId");
                });

            modelBuilder.Entity("Domain.Models.Delivery", b =>
                {
                    b.HasOne("Domain.Models.Driver", "Driver")
                        .WithMany("Deliveries")
                        .HasForeignKey("DriverId");
                });

            modelBuilder.Entity("Domain.Models.Import", b =>
                {
                    b.HasOne("Domain.Models.Provider", "Provider")
                        .WithMany("Imports")
                        .HasForeignKey("ProviderId");
                });

            modelBuilder.Entity("Domain.Models.Product", b =>
                {
                    b.HasOne("Domain.Models.ProductCategory", "Category")
                        .WithOne()
                        .HasForeignKey("Domain.Models.Product", "CategoryForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.Import")
                        .WithMany("Products")
                        .HasForeignKey("ImportId");

                    b.HasOne("Domain.Models.Manufacture", "Manufacture")
                        .WithMany()
                        .HasForeignKey("ManufactureId");

                    b.HasOne("Domain.Models.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId");
                });

            modelBuilder.Entity("Domain.Models.Purchase", b =>
                {
                    b.HasOne("Domain.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("Domain.Models.Delivery", "Delivery")
                        .WithMany()
                        .HasForeignKey("DeliveryId");
                });

            modelBuilder.Entity("Domain.Models.PurchaseUnit", b =>
                {
                    b.HasOne("Domain.Models.Delivery")
                        .WithMany("PurchaseUnits")
                        .HasForeignKey("DeliveryId");

                    b.HasOne("Domain.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("Domain.Models.Purchase", "Purchase")
                        .WithMany("PurchaseUnits")
                        .HasForeignKey("PurchaseId");

                    b.HasOne("Domain.Models.ReturnPurchase")
                        .WithMany("ReturnItems")
                        .HasForeignKey("ReturnPurchaseId");
                });

            modelBuilder.Entity("Domain.Models.ReturnPurchase", b =>
                {
                    b.HasOne("Domain.Models.Purchase", "Purchase")
                        .WithMany()
                        .HasForeignKey("PurchaseId");
                });
#pragma warning restore 612, 618
        }
    }
}
